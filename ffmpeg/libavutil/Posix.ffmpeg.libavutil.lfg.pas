unit Posix.ffmpeg.libavutil.lfg;

(*
 * Lagged Fibonacci PRNG
 * Copyright (c) 2008 Michael Niedermayer
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *)

interface

uses
  Linker.Helper, Posix.ffmpeg.consts;

type

  TarrTwoDouble = array [0 .. 1] of Double;

  PAVLFG = ^AVLFG;
  AVLFG = record
    state: array[0..63] of Cardinal;
    index: Integer;
  end;

procedure av_lfg_init(c: PAVLFG; seed: Cardinal); cdecl; external libavutil name _PU + 'av_lfg_init';

(**
 * Seed the state of the ALFG using binary data.
 *
 * Return value: 0 on success, negative value (AVERROR) on failure.
 *)
function av_lfg_init_from_data(c: PAVLFG; const data: PByte; length: Cardinal): Integer; cdecl; external libavutil name _PU + 'av_lfg_init_from_data';


(**
 * Get the next two numbers generated by a Box-Muller Gaussian
 * generator using the random numbers issued by lfg.
 *
 * @param out array where the two generated numbers are placed
 *)
procedure av_bmg_get(lfg: PAVLFG; &out: TarrTwoDouble); cdecl; external libavutil name _PU + 'av_bmg_get';

implementation


(**
 * Get the next random unsigned 32-bit number using an ALFG.
 *
 * Please also consider a simple LCG like state= state*1664525+1013904223,
 * it may be good enough and faster for your specific use case.
 *)
function av_lfg_get(c: PAVLFG): Cardinal;
begin
  c^.state[c^.index and 63] := c^.state[(c^.index - 24) and 63] + c^.state[(c^.index - 55) and 63];
  Result := c^.state[(c^.index + 1) and 63];

end;

(**
 * Get the next random unsigned 32-bit number using a MLFG.
 *
 * Please also consider av_lfg_get() above, it is faster.
 *)
function av_mlfg_get(c: PAVLFG): Cardinal;
var
  a, b: Cardinal;
begin
  a := c^.state[(c^.index - 55) and 63];
  b := c^.state[(c^.index - 24) and 63];
  c^.state[(c^.index + 1) and 63] := 2*a*b + a +b;
  Result :=  c^.state[(c^.index + 1) and 63];
end;

end.
